From: Sebastiaan van Stijn <github@gone.nl>
Date: Wed, 11 Jul 2018 15:51:51 +0200
Subject: [PATCH] daemon/*.go: fix some Wrap[f]/Warn[f] errors

In particular, these two:
> daemon/daemon_unix.go:1129: Wrapf format %v reads arg #1, but call has 0 args
> daemon/kill.go:111: Warn call has possible formatting directive %s

and a few more.

Signed-off-by: Kir Kolyshkin <kolyshkin@gmail.com>
Signed-off-by: Sebastiaan van Stijn <github@gone.nl>
Origin: upstream, https://github.com/moby/moby/commit/3737194
---
 daemon/daemon.go      |  2 +-
 daemon/daemon_unix.go | 10 +++++-----
 daemon/kill.go        |  2 +-
 daemon/monitor.go     |  2 +-
 daemon/reload.go      |  2 +-
 daemon/unpause.go     |  2 +-
 6 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/engine/daemon/daemon.go b/engine/daemon/daemon.go
index 5e5f586ae085..119fac2a0a4f 100644
--- a/engine/daemon/daemon.go
+++ b/engine/daemon/daemon.go
@@ -538,7 +538,7 @@ func (daemon *Daemon) DaemonLeavesCluster() {
 		select {
 		case <-done:
 		case <-time.After(5 * time.Second):
-			logrus.Warnf("timeout while waiting for ingress network removal")
+			logrus.Warn("timeout while waiting for ingress network removal")
 		}
 	} else {
 		logrus.Warnf("failed to initiate ingress network removal: %v", err)
diff --git a/engine/daemon/daemon_unix.go b/engine/daemon/daemon_unix.go
index e2c77610d4e8..3c11f9d58263 100644
--- a/engine/daemon/daemon_unix.go
+++ b/engine/daemon/daemon_unix.go
@@ -646,13 +646,13 @@ func (daemon *Daemon) initRuntimes(runtimes map[string]types.Runtime) (err error
 	os.RemoveAll(runtimeDir + "-old")
 	tmpDir, err := ioutils.TempDir(daemon.configStore.Root, "gen-runtimes")
 	if err != nil {
-		return errors.Wrapf(err, "failed to get temp dir to generate runtime scripts")
+		return errors.Wrap(err, "failed to get temp dir to generate runtime scripts")
 	}
 	defer func() {
 		if err != nil {
 			if err1 := os.RemoveAll(tmpDir); err1 != nil {
 				logrus.WithError(err1).WithField("dir", tmpDir).
-					Warnf("failed to remove tmp dir")
+					Warn("failed to remove tmp dir")
 			}
 			return
 		}
@@ -661,12 +661,12 @@ func (daemon *Daemon) initRuntimes(runtimes map[string]types.Runtime) (err error
 			return
 		}
 		if err = os.Rename(tmpDir, runtimeDir); err != nil {
-			err = errors.Wrapf(err, "failed to setup runtimes dir, new containers may not start")
+			err = errors.Wrap(err, "failed to setup runtimes dir, new containers may not start")
 			return
 		}
 		if err = os.RemoveAll(runtimeDir + "-old"); err != nil {
 			logrus.WithError(err).WithField("dir", tmpDir).
-				Warnf("failed to remove old runtimes dir")
+				Warn("failed to remove old runtimes dir")
 		}
 	}()
 
@@ -1126,7 +1126,7 @@ func setupRemappedRoot(config *config.Config) (*idtools.IDMappings, error) {
 
 		mappings, err := idtools.NewIDMappings(username, groupname)
 		if err != nil {
-			return nil, errors.Wrapf(err, "Can't create ID mappings: %v")
+			return nil, errors.Wrap(err, "Can't create ID mappings")
 		}
 		return mappings, nil
 	}
diff --git a/engine/daemon/kill.go b/engine/daemon/kill.go
index 5034c4df393c..3e6457e9522d 100644
--- a/engine/daemon/kill.go
+++ b/engine/daemon/kill.go
@@ -108,7 +108,7 @@ func (daemon *Daemon) killWithSignal(container *containerpkg.Container, sig int)
 	if unpause {
 		// above kill signal will be sent once resume is finished
 		if err := daemon.containerd.Resume(context.Background(), container.ID); err != nil {
-			logrus.Warn("Cannot unpause container %s: %s", container.ID, err)
+			logrus.Warnf("Cannot unpause container %s: %s", container.ID, err)
 		}
 	}
 
diff --git a/engine/daemon/monitor.go b/engine/daemon/monitor.go
index 5e740dd4feee..9b4452d7efc0 100644
--- a/engine/daemon/monitor.go
+++ b/engine/daemon/monitor.go
@@ -138,7 +138,7 @@ func (daemon *Daemon) ProcessEvent(id string, e libcontainerd.EventType, ei libc
 				"container": c.ID,
 				"exec-id":   ei.ProcessID,
 				"exec-pid":  ei.Pid,
-			}).Warnf("Ignoring Exit Event, no such exec command found")
+			}).Warn("Ignoring Exit Event, no such exec command found")
 		}
 	case libcontainerd.EventStart:
 		c.Lock()
diff --git a/engine/daemon/reload.go b/engine/daemon/reload.go
index 210864ff879d..452615c3eefd 100644
--- a/engine/daemon/reload.go
+++ b/engine/daemon/reload.go
@@ -186,7 +186,7 @@ func (daemon *Daemon) reloadClusterDiscovery(conf *config.Config, attributes map
 	}
 	netOptions, err := daemon.networkOptions(daemon.configStore, daemon.PluginStore, nil)
 	if err != nil {
-		logrus.WithError(err).Warnf("failed to get options with network controller")
+		logrus.WithError(err).Warn("failed to get options with network controller")
 		return nil
 	}
 	err = daemon.netController.ReloadConfiguration(netOptions...)
diff --git a/engine/daemon/unpause.go b/engine/daemon/unpause.go
index 9061d50a168e..27648ae72e3c 100644
--- a/engine/daemon/unpause.go
+++ b/engine/daemon/unpause.go
@@ -37,7 +37,7 @@ func (daemon *Daemon) containerUnpause(container *container.Container) error {
 	daemon.LogContainerEvent(container, "unpause")
 
 	if err := container.CheckpointTo(daemon.containersReplica); err != nil {
-		logrus.WithError(err).Warnf("could not save container to disk")
+		logrus.WithError(err).Warn("could not save container to disk")
 	}
 
 	return nil

Description: Fix file mode values for some tests
 Some tests specified invalid octal file mode values without the leading
 zero. This was causing a test failure in pbuilder due to a less
 permissive umask value.
Author: Tim Potter <tpot@hpe.com>
Bug-Github: https://github.com/moby/moby/issues/33484
Forwarded: https://github.com/moby/moby/issues/33485
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
Index: docker.io/pkg/filenotify/poller_test.go
===================================================================
--- docker.io.orig/pkg/filenotify/poller_test.go
+++ docker.io/pkg/filenotify/poller_test.go
@@ -61,7 +61,7 @@ func TestPollerEvent(t *testing.T) {
 	default:
 	}
 
-	if err := ioutil.WriteFile(f.Name(), []byte("hello"), 644); err != nil {
+	if err := ioutil.WriteFile(f.Name(), []byte("hello"), 0644); err != nil {
 		t.Fatal(err)
 	}
 	if err := assertEvent(w, fsnotify.Write); err != nil {
Index: docker.io/pkg/sysinfo/sysinfo_linux_test.go
===================================================================
--- docker.io.orig/pkg/sysinfo/sysinfo_linux_test.go
+++ docker.io/pkg/sysinfo/sysinfo_linux_test.go
@@ -16,7 +16,7 @@ func TestReadProcBool(t *testing.T) {
 	defer os.RemoveAll(tmpDir)
 
 	procFile := filepath.Join(tmpDir, "read-proc-bool")
-	if err := ioutil.WriteFile(procFile, []byte("1"), 644); err != nil {
+	if err := ioutil.WriteFile(procFile, []byte("1"), 0644); err != nil {
 		t.Fatal(err)
 	}
 
@@ -24,7 +24,7 @@ func TestReadProcBool(t *testing.T) {
 		t.Fatal("expected proc bool to be true, got false")
 	}
 
-	if err := ioutil.WriteFile(procFile, []byte("0"), 644); err != nil {
+	if err := ioutil.WriteFile(procFile, []byte("0"), 0644); err != nil {
 		t.Fatal(err)
 	}
 	if readProcBool(procFile) {
@@ -48,7 +48,7 @@ func TestCgroupEnabled(t *testing.T) {
 		t.Fatal("cgroupEnabled should be false")
 	}
 
-	if err := ioutil.WriteFile(path.Join(cgroupDir, "test"), []byte{}, 644); err != nil {
+	if err := ioutil.WriteFile(path.Join(cgroupDir, "test"), []byte{}, 0644); err != nil {
 		t.Fatal(err)
 	}
 
